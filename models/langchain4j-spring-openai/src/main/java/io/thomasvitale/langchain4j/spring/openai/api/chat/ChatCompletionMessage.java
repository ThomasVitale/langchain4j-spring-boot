package io.thomasvitale.langchain4j.spring.openai.api.chat;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.PropertyNamingStrategies;
import com.fasterxml.jackson.databind.annotation.JsonNaming;

import org.springframework.util.Assert;
import org.springframework.util.CollectionUtils;

/**
 * Message in a conversation.
 *
 * @param content The contents of the message. Required unless toolCalls is specified.
 * @param role The role of the author of this message. One of {@link Role}.
 * @param name An optional name for the participant. Provides the model information
 *             to differentiate between participants of the same role.
 * @param toolCallId Tool call that this message is responding to.
 *                   Only used when role is {@link Role#TOOL}.
 * @param toolCalls The tool calls generated by the model, such as function calls.
 *                  Only used when role is {@link Role#ASSISTANT}.
 *
 * @author Thomas Vitale
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
public record ChatCompletionMessage(
        Object content,
        Role role,
        String name,
        String toolCallId,
        List<ToolCall> toolCalls
) {

    public ChatCompletionMessage {
        Assert.notNull(role, "role cannot be null");

        if (Role.SYSTEM.equals(role) || Role.USER.equals(role)) {
            Assert.notNull(content, "content cannot be null");
        }

        if (Role.ASSISTANT.equals(role) && CollectionUtils.isEmpty(toolCalls)) {
            Assert.notNull(content, "content cannot be null");
        }

        if (Role.TOOL.equals(role)) {
            Assert.notNull(content, "content cannot be null");
            Assert.hasText(toolCallId, "toolCallId cannot be null or empty");
        }
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private Object content;
        private Role role;
        private String name;
        private String toolCallId;
        private List<ToolCall> toolCalls;

        private Builder() {}

        public Builder content(String content) {
            this.content = content;
            return this;
        }

        public Builder content(List<Content> content) {
            this.content = content;
            return this;
        }

        public Builder role(Role role) {
            this.role = role;
            return this;
        }

        public Builder name(String name) {
            this.name = name;
            return this;
        }

        public Builder toolCallId(String toolCallId) {
            this.toolCallId = toolCallId;
            return this;
        }

        public Builder toolCalls(List<ToolCall> toolCalls) {
            this.toolCalls = toolCalls;
            return this;
        }

        public ChatCompletionMessage build() {
            return new ChatCompletionMessage(content, role, name, toolCallId, toolCalls);
        }
    }

    /**
     * Content part of the message.
     *
     * @param type The type of the content part.
     * @param text The text content.
     * @param imageUrl The image content.
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
    public record Content(
            ContentType type,
            String text,
            ImageUrl imageUrl
    ) {

        public static Builder builder() {
            return new Builder();
        }

        public static class Builder {
            private ContentType type;
            private String text;
            private ImageUrl imageUrl;

            private Builder() {}

            public Builder type(ContentType type) {
                this.type = type;
                return this;
            }

            public Builder text(String text) {
                this.text = text;
                return this;
            }

            public Builder imageUrl(ImageUrl imageUrl) {
                this.imageUrl = imageUrl;
                return this;
            }

            public Content build() {
                return new Content(type, text, imageUrl);
            }
        }

    }

    /**
     * The type of the content.
     */
    public enum ContentType {
        @JsonProperty("text") TEXT,
        @JsonProperty("image_url") IMAGE_URL
    }

    /**
     * Image content details.
     *
     * @param url Either a URL of the image or the base64 encoded image data.
     * @param detail Specifies the detail level of the image.
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public record ImageUrl(
            String url,
            String detail
    ) {}

    /**
     * The role of the author of this message.
     */
    public enum Role {
        @JsonProperty("system") SYSTEM,
        @JsonProperty("user") USER,
        @JsonProperty("assistant") ASSISTANT,
        @JsonProperty("tool") TOOL
    }

    /**
     * Tool call generated by the model, such as a function call.
     *
     * @param id The ID of the tool call.
     * @param type The type of the tool. Currently, only 'function' is supported.
     * @param function The function that the model called.
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public record ToolCall(
            String id,
            String type,
            ChatCompletionFunction function
    ) {
        public ToolCall(String id, ChatCompletionFunction function) {
            this(id, "function", function);
        }
    }

    /**
     * The function definition.
     *
     * @param name The name of the function to call.
     * @param arguments The arguments to call the function with, as generated by the model
     *                  in JSON format. Note that the model does not always generate valid JSON,
     *                  and may hallucinate parameters not defined by your function schema.
     *                  Validate the arguments in your code before calling your function.
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public record ChatCompletionFunction(
            String name,
            String arguments
    ) {}

}
