package io.thomasvitale.langchain4j.spring.openai.api.chat;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.PropertyNamingStrategies;
import com.fasterxml.jackson.databind.annotation.JsonNaming;

/**
 * Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
 *
 * @param id A unique identifier for the chat completion. Each chunk has the same ID.
 * @param choices A list of chat completion choices. Can be more than one if 'n' is greater than 1.
 * @param created The Unix timestamp (in seconds) of when the chat completion was created.
 *                Each chunk has the same timestamp.
 * @param model The model to generate the completion.
 * @param systemFingerprint This fingerprint represents the backend configuration that the model
 *                          runs with. Can be used in conjunction with the 'seed' request parameter
 *                          to understand when backend changes have been made that might impact
 *                          determinism.
 * @param object The object type, which is always 'chat.completion.chunk'.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
public record ChatCompletionChunkResponse(
        String id,
        List<ChunkChoice> choices,
        Long created,
        String model,
        String systemFingerprint,
        String object
) {

    /**
     * Chat completion choice.
     *
     * @param delta A chat completion delta generated by streamed model responses.
     * @param logprobs Log probability information for the choice.
     * @param finishReason The reason the model stopped generating tokens.
     * @param index The index of the choice in the list of choices.
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
    public record ChunkChoice(
            ChatCompletionMessage delta,
            LogProbs logprobs,
            ChatCompletionFinishReason finishReason,
            Integer index
    ) {}

}
